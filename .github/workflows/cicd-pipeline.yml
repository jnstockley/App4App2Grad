name: CI/CD Pipeline

on:
  workflow_dispatch:
#  push:
#  pull_request:
#    types:
#      - opened
#      - reopened
#    branches:
#      - main

jobs:
  Linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.6
          bundler-cache: true

      - name: Perform linting
        run: bundle exec rubocop

  Testing:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up Ruby 2.6.6
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.6
          bundler-cache: true

      - name: Build test database
        run: |
          bundle exec rake db:migrate

      - name: Run spec tests
        run: bundle exec rspec

      - name: Run feature tests
        run: bundle exec cucumber
    
  Staging:
    needs: Testing
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: production
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      
      - name: Set up Ruby 2.6.6
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.6
          bundler-cache: true
      
      - name: Build production database
        run: |
          bundle exec rake db:migrate
          bundle exec rake db:seed

      - name: Generate production secrets key
        run: |
          echo "SECRET_KEY_BASE=$(bundle exec rake secret)" >> $GITHUB_ENV

      - name: Deploy Heroku locally
        env: 
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_PROCFILE: .github/workflows/heroku-resources/Procfile.test
          SECRET_KEY_BASE: ${{ env.SECRET_KEY_BASE }}
        run: |
          heroku local -f $HEROKU_PROCFILE -p 3000 &
          sleep 15s
      
      # MUST specify '/home' to get HTTP 200 because '/' auto-redirects
      - name: Perform health check
        run: |
          RESPONSE=$(curl -Is --retry 3 --retry-delay 5 http://localhost:3000/home | head -1 | head -c 15)
          echo "SERVER STATUS: $RESPONSE"
          if [ "$RESPONSE" != "HTTP/1.1 200 OK" ]; then exit 1; fi
      
      # ADD CAPYBARA OR SELENIUM TESTS HERE
  
  # This job generates variables for the Deploy job conditionals. The only alternative
  # is to run Deploy-Prod for any matching tag, but this would mean a matching tag
  # associated with a commit on ANY branch would trigger a production deployment!
  Tree-Check:
    # if tagged commit (for Deploy-Prod) or on main branch (for Deploy-Beta)
    if: (startsWith(github.ref, 'refs/tags/selt2022_sprint')) || (github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ env.COMMIT_HASH }}
      main_head: ${{ env.MAIN_HEAD }}
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get branch and tag info
        run: |
          git fetch --depth 1
          COMMIT_HASH=${{ github.sha }}
          MAIN_HEAD=$(git log -n 1 --pretty=format:"%H" origin/main)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "MAIN_HEAD=$MAIN_HEAD" >> $GITHUB_ENV
          echo "commit hash: $COMMIT_HASH"
          echo "main head: $MAIN_HEAD"
          if [ "$MAIN_HEAD" != "$COMMIT_HASH" ]; then echo "Commit hash is not head of main. A deployment cannot be made." && exit 1; fi

  # deploys current main branch to 'uiowa-grad-app-beta' for quality assurance
  # note: database is not shared with prod, so we use seeds here
  Deploy-Beta:
    # ONLY deploy on PUSH to MAIN branch of UIOWAjohnsonhj/selt2022_teamprojects-team-4
    if: (github.event_name == 'push') && (needs.Tree-Check.outputs.commit_hash == needs.Tree-Check.outputs.main_head) && (github.repository == 'UIOWAjohnsonhj/selt2022_teamprojects-team-4')
    needs: 
      - Staging
      - Tree-Check
    runs-on: ubuntu-latest
    environment: production
    env:
      RAILS_ENV: production
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_DEBUG_RAILS_RUNNER: 1
      HEROKU_APP_NAME: uiowa-grad-app-beta
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Additional setup (if needed)
        run: |
          heroku git:remote -a $HEROKU_APP_NAME
          heroku stack:set heroku-20
          git fetch --unshallow
          git config user.email "gradapp-pipeline@fake-email.com"
          git config user.name "GradApp Pipeline"

      - name: Deploy to Heroku
        run: |
          echo "Deploying $HEROKU_APP_NAME"
          git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git HEAD:main

      - name: Reset and seed database
        run: | 
          heroku run rake db:migrate:reset
          heroku run rake db:seed
      
      - name: Health check
        run: |
            RESPONSE=$(curl -Is --retry 3 --retry-delay 5 http://$HEROKU_APP_NAME.herokuapp.com/home | head -1 | head -c 15)
            echo "HEROKU APP STATUS: $RESPONSE"
            if [ "$RESPONSE" != "HTTP/1.1 200 OK" ]; then exit 1; fi

  # for tagged releases, deploys a production app whose name is calculated based
  # on the current sprint iteration
  Deploy-Prod:
    # ONLY deploy on TAGGED PUSH to MAIN branch of UIOWAjohnsonhj/selt2022_teamprojects-team-4
    if: (github.event_name == 'push') && (needs.Tree-Check.outputs.commit_hash == needs.Tree-Check.outputs.main_head) && (startsWith(github.ref, 'refs/tags/selt2022_sprint')) && (github.repository == 'UIOWAjohnsonhj/selt2022_teamprojects-team-4')
    needs:
      - Deploy-Beta
      - Tree-Check
    runs-on: ubuntu-latest
    environment: production
    env:
      RAILS_ENV: production
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      HEROKU_DEBUG_RAILS_RUNNER: 1
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
      
      - name: Generate environment variables
        run: |
          echo "CURRENT_DATE=$(TZ=America/Mexico_City date +%Y%m%d)" >> $GITHUB_ENV
          echo "HEROKU_MAPPINGS=$(cat .github/workflows/heroku-resources/mappings.json)" >> $GITHUB_ENV

      # app name: uiowa-grad-app
      # 2022-11-01 <= current_date <= 2022-11-09
      - if: (env.SPRINT1_START <= env.CURRENT_DATE) && (env.CURRENT_DATE <= env.SPRINT1_END)
        run: echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV
        env:
          SPRINT1_START: ${{ fromJson(env.HEROKU_MAPPINGS).sprint1_start }}
          SPRINT1_END: ${{ fromJson(env.HEROKU_MAPPINGS).sprint1_end }}
          HEROKU_APP_NAME: ${{ fromJson(env.HEROKU_MAPPINGS).sprint1_app_name }}
        
      # app name: uiowa-grad-app-v2
      # 2022-11-10 <= current_date <= 2022-11-27
      - if: (env.SPRINT2_START <= env.CURRENT_DATE) && (env.CURRENT_DATE <= env.SPRINT2_END)
        run: echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV
        env:
          SPRINT2_START: ${{ fromJson(env.HEROKU_MAPPINGS).sprint2_start }}
          SPRINT2_END: ${{ fromJson(env.HEROKU_MAPPINGS).sprint2_end }}
          HEROKU_APP_NAME: ${{ fromJson(env.HEROKU_MAPPINGS).sprint2_app_name }}

      # app name: uiowa-grad-app-v3
      # 2022-11-28 <= current_date <= 2022-12-09
      - if: (env.SPRINT3_START <= env.CURRENT_DATE) && (env.CURRENT_DATE <= env.SPRINT3_END)
        run: echo "HEROKU_APP_NAME=$HEROKU_APP_NAME" >> $GITHUB_ENV
        env:
          SPRINT3_START: ${{ fromJson(env.HEROKU_MAPPINGS).sprint3_start }}
          SPRINT3_END: ${{ fromJson(env.HEROKU_MAPPINGS).sprint3_end }}
          HEROKU_APP_NAME: ${{ fromJson(env.HEROKU_MAPPINGS).sprint3_app_name }}

      - name: Additional setup (if needed)
        env:
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        run: |
          heroku git:remote -a $HEROKU_APP_NAME
          heroku stack:set heroku-20
          git fetch --unshallow
          git config user.email "gradapp-pipeline@fake-email.com"
          git config user.name "GradApp Pipeline"

      - name: Deploy to Heroku
        env:
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        run: |
          echo "Deploying $HEROKU_APP_NAME"
          git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git HEAD:main

      - name: Migrate database
        env: 
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        run: heroku run rake db:migrate
      
      - name: Health check
        env:
          HEROKU_APP_NAME: ${{ env.HEROKU_APP_NAME }}
        run: |
            RESPONSE=$(curl -Is --retry 3 --retry-delay 5 http://$HEROKU_APP_NAME.herokuapp.com/home | head -1 | head -c 15)
            echo "HEROKU APP STATUS: $RESPONSE"
            if [ "$RESPONSE" != "HTTP/1.1 200 OK" ]; then exit 1; fi
